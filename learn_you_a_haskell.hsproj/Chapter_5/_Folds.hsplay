-- Haskell Playground 1.0
suml []
suml' []
sumr []
sumr' []

suml [1]
sumr [1]
suml' [1]
sumr' [1]

suml [1..10]
sumr [1..10]


scanl (+) 0 [1,2]
scanr (+) 0 [1,2]

scanl (+) 0 [1..5]
scanr (+) 0 [1..5]

suml1 [1]
suml [1..99]

suml [3,5,2,1]
scanl (+) 0 [3,5,2,1]

foldl (*) 1 [3,5,2,1]
foldl (*) 1 [1..10]

map'' (+3) [1,2,3]
-- + 3 3 : []
-- + 3 2 : [6]
-- + 3 1 : [5,6]
-- [4,5,6]

eleml 0 []
elemr 0 []

eleml 0 [0]
elemr 0 [0]

eleml 0 [0,0]
elemr 0 [0,0]

eleml 0 [1,2,3,0,3,2,1]
elemr 0 [1,2,3,0,3,2,1]


eleml 0 [0,1,2,3]
elemr 0 [0,1,2,3]

eleml 0 [1,2,3]
elemr 0 [1,2,3]
-- eleml 0 (repeat 0) -- don't do this

elemr 0 $ repeat 0

maximum' [1]
maximum' [99,98..1]

reversel [9,8..1]
reverser [9,8..1]

reverser' [9,8..1]

reversel' [9,8..1]

reversef [9,8..1]

diff_right [1..4]
diff_right' [1..4]
diff_left [1..4]
diff_left' [1..4]
foldr (\ x acc -> x + acc) 0 [1..100]

and' [True,False,True]
andS [True,True,False,True,True,True]

and' (repeat False)

scanl (+) 0 [3,5,2,1]
scanr (+) 0 [3,5,2,1]

findMax = (\ acc x -> if x > acc then x else acc)
  
scanl1 findMax [3,4,5,3,7,9,2,1]
scanl1 findMax [0,1,0,2,3,2,4,3]

foldl (flip (:)) [] [3,2,1]
scanl (flip (:)) [] []
scanl (flip (:)) [] [3]
scanl (flip (:)) [] [3,2]
scanl (flip (:)) [] [3,2,1]

foldr (\ x xs -> xs ++ [x]) [] [3,2,1]
scanr (\ x xs -> xs ++ [x]) [] []
scanr (\ x xs -> xs ++ [x]) [] [3]
scanr (\ x xs -> xs ++ [x]) [] [3,2]
scanr (\ x xs -> xs ++ [x]) [] [3,2,1]

flip (:) [9,2] 1

sqrtSums 10000

sum (map sqrt [1..608])
sum (map sqrt [1..607])

sum $$ map sqrt [1..608]
sum $ map sqrt [1..608]
sum (filter (> 10) (map (*2) [2..10]))
sum $ filter (> 10) (map (*2) [2..10])
sum $ filter (> 10) $ map (*2) [2..10]

map ($ 3) [(4+),(10*),(^2),sqrt]

map ($ 3) [(4-)]

map (\ x -> negate (abs x)) [5,-3,-6,7,-3,2,-19,24]

map (negate . abs) [5,-3,-6,7,-3,2,-19,24]

map (\ xs -> negate (sum (tail xs))) [[1..5],[3..6],[1..7]]

map (negate.sum.tail) [[1..5],[3..6],[1..7]]

sum (replicate 5 (max 6.7 8.9))
(sum.replicate 5) (max 6.7 8.9)
sum.replicate 5 $ max 6.7 8.9
8.9 * 5

replicate 2 (product (map (*3) (zipWith max [1,2] [4,5])))
replicate 2 . product . map (*3) $ zipWith max [1,2] [4,5]

replicate 2 $ 15*12

