-- Haskell Playground 1.0
doubleUs 4 9

doubleSmallNumber 100
doubleSmallNumber 100.01
doubleSmallNumber 101
doubleSmallNumber 99.99

conanO'Brien

lostNumbers

[1,2,3,4] ++ [9,10,11,12]
"hello" ++ " " ++ "world"
['w','o'] ++ ['o','t']

'A':" SMALL CAT"
0:[1,2,3,4,5]

[]
[[]]
[[],[],[]]

"Steve Buscemi" !! 6

[9.4,33.2,96.2,11.2,23.25] !! 1

lostNumbers !! 6

b
b ++ [[1,1,1,1]]
[6,7,8]:b

b !! 2

[3,2,1] > [2,1,0]
[3,2,1] > [2,10,100]
[3,4,2] > [3,4]
[3,4,2] > [2,4]
[3,4,2] == [3,4,2]
[3,4,2,0] > [3,4,2]
[1,2,3] < [2,3,4,5,4,6]
[9,1,1,1,1] > [9]

head [5,4,3,2,1]
tail [5,4,3,2,1]
last [5,4,3,2,1]
init [5,4,3,2,1]
head []

length [5,4,3,2,1]
null [1,2,3]
null []
null [[]]
null $ [[]] !! 0

xs = []
null xs

null $ [xs]
null $ [xs] !! 0

reverse [5,4,3,2,1]
reverse lostNumbers

--take
take 3 [5,4,3,2,1]
take 0 lostNumbers
take 1 [3,9,3]
takeWhile (/=3) [5,4,3,2,1]
take 5 [1,2]
take 0 [6,6,6]

--drop
drop 3 lostNumbers
drop 3 [8,4,2,1,5,6]
drop 0 [1,2,3,4]
drop 100 [1,2,3,4]

maximum [8,4,2,1,5,6]
minimum lostNumbers
minimum b
maximum b

sum lostNumbers
map sum b

product lostNumbers
map product b

elem 4 [3,4,5,6]
elem [1,2,3] b
elem 42 lostNumbers
elem 43 lostNumbers
elem (6*7) lostNumbers

['Z'..'a']
[3,7..40]

[0.1,0.3..1]

take 24 [13..26]

take 10 $ cycle [1,2,3]

take 12 $ cycle "LOL "

take 10 $ repeat 5

replicate 10 5

[doubleMe x | x <- [1..10]]

[doubleMe x | x <- [1..10], x*2 >= 12]

[x | x <- [50..100], mod x 7 == 3]

[x * y | x <- [7,1,2,3,4], y <- [4,7]]

[x * y | x <- [2,5,10], y <- [8,10,11]]

length' b

length' $ b !! 0

length' lostNumbers

length' $ lostNumbers ++ b !! 0

removeNonUppercase "IdontLIKEFROGS"

xxs = [[1,3,5,2,3,1,2,4,5],[1,2,3,4,5,6,7,8,9],[1,2,4,2,1,6,1,3,1,3,2,3,6]]

[ [ x | x <- xs, even x] | xs <-xxs]

lot = [(1,2),(8,11),(4,5)]
fst $ head lot
snd $ last lot

zip [1,2,3,4,5] [5,5,5,5,5]

zip [1..5] ["one", "two", "three" , "four", "five"]

rightTriangles

